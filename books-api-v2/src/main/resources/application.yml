# Configuration file

# Camel
camel:
  context:
    name: books-api-v2

# Deployment location
deployment:
  location: OpenShift

# Quarkus
quarkus:
  # Display the banner
  banner:
    enabled: true
  # Eventually, the client should trust a self signed certificate presented by the API server
  kubernetes-client:
    trust-certs: true
  # Enable native SSL support
  ssl:
    native: true

  # THe container registry to use
  container-image:
    registry: image-registry.openshift-image-registry.svc:5000

  ## Quarkus OpenShift extension configuration
  openshift:
    # The kind of the deployment resource to use. Supported values are 'Deployment', 'StatefulSet', 'Job', 'CronJob' and 'DeploymentConfig' defaulting to the latter.
    deployment-kind: Deployment
    # Part of the `RHAF-CEQ-Demo` Application Group
    part-of: library-books-api
    # The build config strategy to use
    build-strategy: DOCKER
    # The default Dockerfile to use for jvm builds
    jvm-dockerfile: src/main/docker/Dockerfile.jvm
    # The default Dockerfile to use for native builds
    native-dockerfile: src/main/docker/Dockerfile.native
    # The number of desired pods
    replicas: 1
    # Expose OpenShift route
    route:
      expose: true
      tls:
        termination: edge
    # CPU and Memory resources requirements when deployed on Kubernetes/OpenShift
    resources:
      requests:
        cpu: 30m
        memory: 256Mi
      limits:
        cpu: 500m
        memory: 256Mi
    # The type of service that will be generated for the application
    service-type: ClusterIP

  # OpenTelemetry configuration. This is leveraged by Camel Quarkus OpenTelemetry extension
  ## Identifier for the origin of spans created by the application
  application:
    name: ${camel.context.name}
  otel:
    exporter:
      otlp:
        traces:
          endpoint: http://localhost:4317

  ## Quarkus native build 
  native:
    # If all character sets should be added to the native image. This increases image size
    add-all-charsets: true
    # If this build should be done using a container runtime. 
    # If this is set docker will be used by default, unless container-runtime is also set.
    container-build: true
    # A comma separated list of Ant-path style patterns to match resources
    # that should be <strong>included</strong> in the native executable. By default,
    # resources not selected by quarkus itself are ignored. Then, inclusion
    # of additional resources could be triggered with
    # <code>includePatterns</code>. When the inclusion patterns is too
    # large, eviction of previously selected resources could be triggered
    # with <code>excludePatterns</code>.
    resources:
      includes: json-schema/*,openapi/*,META-INF/resources/index.html

  ## Camel Quarkus
  camel:
    # Microprofile Camel Health checks
    # Cf. https://camel.apache.org/camel-quarkus/latest/extensions/microprofile-health.html
    health:
      enabled: true

    # Micrometer Camel Metrics
    # Cf. https://camel.apache.org/camel-quarkus/latest/reference/extensions/micrometer.html
    metrics:
      enable-route-policy: true
      enable-message-history: true
      enable-exchange-event-notifier: true
      enable-route-event-notifier: true
      enable-camel-context-event-notifier: true
      enable-instrumented-thread-pool-factory: false

    # native mode configuration
    native:
      # A comma separated list of Ant-path style patterns to match class names
      # that should be registered for reflection.
      # Reference: https://camel.apache.org/camel-quarkus/latest/user-guide/native-mode.html#reflection
      reflection:
        include-patterns: java.lang.Exception

  # Register for indexing
  # Reference: https://camel.apache.org/camel-quarkus/latest/user-guide/native-mode.html#reflection
  index-dependency:
    jsonvalidator:
      group-id: org.apache.camel.quarkus
      artifact-id: camel-quarkus-json-validator

# Only when running in prod profile
"%prod":
  quarkus:
    # Quarkus kubernetes config extension
    kubernetes-config:
      # Enable to look up the configuration from the API server
      enabled: true
      # ConfigMaps (list of strings) to look for in the namespace that the Kubernetes Client has been configured for
      config-maps: ${camel.context.name}-config